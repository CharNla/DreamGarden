import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { insertAlarmSchema, insertSleepRecordSchema, insertChatMessageSchema } from "@shared/schema";

export async function registerRoutes(app: Express): Promise<Server> {
  const userId = "demo-user"; // For demo purposes, using a fixed user ID

  // Get user profile
  app.get("/api/user", async (req, res) => {
    try {
      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ message: "User not found" });
      }
      res.json(user);
    } catch (error) {
      res.status(500).json({ message: "Failed to get user" });
    }
  });

  // Alarm routes
  app.get("/api/alarms", async (req, res) => {
    try {
      const alarms = await storage.getAlarms(userId);
      res.json(alarms);
    } catch (error) {
      res.status(500).json({ message: "Failed to get alarms" });
    }
  });

  app.post("/api/alarms", async (req, res) => {
    try {
      const validatedData = insertAlarmSchema.parse(req.body);
      const alarm = await storage.createAlarm(userId, validatedData);
      res.status(201).json(alarm);
    } catch (error) {
      res.status(400).json({ message: "Invalid alarm data" });
    }
  });

  app.put("/api/alarms/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const validatedData = insertAlarmSchema.partial().parse(req.body);
      const alarm = await storage.updateAlarm(id, validatedData);
      if (!alarm) {
        return res.status(404).json({ message: "Alarm not found" });
      }
      res.json(alarm);
    } catch (error) {
      res.status(400).json({ message: "Invalid alarm data" });
    }
  });

  app.delete("/api/alarms/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const success = await storage.deleteAlarm(id);
      if (!success) {
        return res.status(404).json({ message: "Alarm not found" });
      }
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ message: "Failed to delete alarm" });
    }
  });

  // Sleep record routes
  app.get("/api/sleep-records", async (req, res) => {
    try {
      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;
      const records = await storage.getSleepRecords(userId, limit);
      res.json(records);
    } catch (error) {
      res.status(500).json({ message: "Failed to get sleep records" });
    }
  });

  app.post("/api/sleep-records", async (req, res) => {
    try {
      const validatedData = insertSleepRecordSchema.parse(req.body);
      
      // Check if record already exists for this date
      const existingRecord = await storage.getSleepRecordByDate(userId, validatedData.date);
      if (existingRecord) {
        return res.status(409).json({ message: "Sleep record already exists for this date" });
      }

      // Calculate rewards based on rating
      const dewdropsEarned = validatedData.rating * 2;
      const sunlightEarned = validatedData.rating === 5 ? 5 : validatedData.rating;
      
      const recordWithRewards = {
        ...validatedData,
        dewdropsEarned,
        sunlightEarned,
      };

      const record = await storage.createSleepRecord(userId, recordWithRewards);
      
      // Update user currency
      await storage.updateUserCurrency(userId, dewdropsEarned, sunlightEarned);
      
      res.status(201).json(record);
    } catch (error) {
      res.status(400).json({ message: "Invalid sleep record data" });
    }
  });

  // Chat routes
  app.get("/api/chat/messages", async (req, res) => {
    try {
      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;
      const messages = await storage.getChatMessages(userId, limit);
      res.json(messages);
    } catch (error) {
      res.status(500).json({ message: "Failed to get chat messages" });
    }
  });

  app.post("/api/chat/messages", async (req, res) => {
    try {
      const validatedData = insertChatMessageSchema.parse(req.body);
      const userMessage = await storage.createChatMessage(userId, validatedData);
      
      // Generate AI response
      const aiResponse = generateAIResponse(validatedData.message);
      const aiMessage = await storage.createChatMessage(userId, {
        message: aiResponse,
        isFromUser: false,
      });
      
      res.status(201).json({ userMessage, aiMessage });
    } catch (error) {
      res.status(400).json({ message: "Invalid message data" });
    }
  });

  // Simple AI response generator
  function generateAIResponse(userMessage: string): string {
    const lowercaseMessage = userMessage.toLowerCase();
    
    if (lowercaseMessage.includes('‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢') || lowercaseMessage.includes('‡πÅ‡∏¢‡πà') || lowercaseMessage.includes('‡πÄ‡∏®‡∏£‡πâ‡∏≤')) {
      return '‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏ô‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏ô‡∏∞ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡∏î‡∏π‡∏ô‡∏∞ üíô';
    }
    
    if (lowercaseMessage.includes('‡∏î‡∏µ') || lowercaseMessage.includes('‡∏™‡∏ö‡∏≤‡∏¢') || lowercaseMessage.includes('‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì')) {
      return '‡∏î‡∏µ‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞! ‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á üå±‚ú®';
    }
    
    if (lowercaseMessage.includes('‡∏ù‡∏±‡∏ô')) {
      return '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏à‡∏¥‡∏ï‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏ô‡∏∞ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞ üåô';
    }
    
    if (lowercaseMessage.includes('‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ') || lowercaseMessage.includes('‡∏™‡∏ß‡∏ô')) {
      return '‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÑ‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡∏∞ ‡πÉ‡∏´‡πâ‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ó‡∏∏‡∏Å‡πÄ‡∏ä‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á üåø';
    }
    
    // Default responses
    const responses = [
      '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏Å‡∏â‡∏±‡∏ô üòä',
      '‡∏â‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏π‡πÅ‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏™‡∏°‡∏≠ üíö',
      '‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ ‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ üå∏',
      '‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö‡πÑ‡∏´‡∏°? ‡∏â‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏™‡∏°‡∏≠ ü§ó'
    ];
    
    return responses[Math.floor(Math.random() * responses.length)];
  }

  const httpServer = createServer(app);
  return httpServer;
}
