import { useState } from "react";
import { useLocation } from "wouter";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { ArrowLeft } from "lucide-react";
import { useCreateSleepRecord } from "@/hooks/use-sleep-data";
import { useToast } from "@/hooks/use-toast";
import StarRating from "@/components/star-rating";

export default function SleepRating() {
  const [, setLocation] = useLocation();
  const [rating, setRating] = useState(0);
  const [journal, setJournal] = useState("");
  
  const createSleepRecord = useCreateSleepRecord();
  const { toast } = useToast();

  const handleSave = async () => {
    if (rating === 0) {
      toast({
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
        description: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        variant: "destructive",
      });
      return;
    }

    try {
      const today = new Date().toISOString().split('T')[0];
      const currentTime = new Date().toLocaleTimeString('th-TH', { 
        hour: '2-digit', 
        minute: '2-digit',
        hour12: false 
      });

      await createSleepRecord.mutateAsync({
        date: today,
        rating,
        journal: journal.trim() || null,
        wakeUpTime: currentTime,
      });

      toast({
        title: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        description: `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏´‡∏¢‡∏≤‡∏î‡∏ô‡πâ‡∏≥‡∏Ñ‡πâ‡∏≤‡∏á ${rating * 2} ‡∏´‡∏¢‡∏≤‡∏î ‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏™‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå ${rating === 5 ? 5 : rating} ‡∏´‡∏ô‡πà‡∏ß‡∏¢`,
      });

      setLocation("/garden");
    } catch (error) {
      toast({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
        variant: "destructive",
      });
    }
  };

  const calculateRewards = (rating: number) => {
    return {
      dewdrops: rating * 2,
      sunlight: rating === 5 ? 5 : rating,
    };
  };

  const rewards = calculateRewards(rating);

  return (
    <div className="absolute inset-0 bg-white">
      {/* Header */}
      <motion.div 
        className="dream-header-gradient text-white px-6 py-4 text-center"
        initial={{ opacity: 0, y: -50 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <h1 className="text-xl font-semibold">‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∑‡∏ô</h1>
        <p className="text-sm opacity-90">‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡∏≠‡∏Å‡πÄ‡∏£‡∏≤‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏ô‡∏µ‡πâ‡∏ô‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á</p>
      </motion.div>

      <motion.div 
        className="p-6 space-y-8"
        initial={{ opacity: 0, y: 50 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2 }}
      >
        {/* Sleep Rating */}
        <motion.div 
          className="text-center space-y-4"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.3 }}
        >
          <h2 className="text-lg font-semibold text-gray-700">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô</h2>
          <StarRating
            rating={rating}
            onRatingChange={setRating}
            size="lg"
          />
          <p className="text-sm text-gray-500">‡πÅ‡∏ï‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (1 = ‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å, 5 = ‡∏î‡∏µ‡∏°‡∏≤‡∏Å)</p>
        </motion.div>

        {/* Mood/Dream Journal */}
        <motion.div 
          className="space-y-3"
          initial={{ opacity: 0, x: -50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.4 }}
        >
          <h3 className="font-semibold text-gray-700">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô</h3>
          <Textarea
            value={journal}
            onChange={(e) => setJournal(e.target.value)}
            placeholder="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì... üí≠&#10;&#10;‡πÄ‡∏ä‡πà‡∏ô: ‡∏ù‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏∞‡πÄ‡∏• ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô"
            className="resize-none min-h-[120px] focus:ring-2 focus:ring-primary/20"
          />
        </motion.div>

        {/* Rewards Display */}
        {rating > 0 && (
          <motion.div 
            className="bg-gradient-to-r from-[var(--dream-primary-50)] to-[var(--dream-secondary-50)] rounded-xl p-4"
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.5 }}
          >
            <h3 className="font-semibold text-gray-700 mb-3">‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö</h3>
            <div className="flex items-center justify-between">
              <motion.div 
                className="flex items-center space-x-2"
                whileHover={{ scale: 1.05 }}
              >
                <div className="dewdrop w-6 h-6" />
                <span className="text-sm font-medium">+{rewards.dewdrops} ‡∏´‡∏¢‡∏≤‡∏î‡∏ô‡πâ‡∏≥‡∏Ñ‡πâ‡∏≤‡∏á</span>
              </motion.div>
              <motion.div 
                className="flex items-center space-x-2"
                whileHover={{ scale: 1.05 }}
              >
                <div className="sunlight w-6 h-6 rounded-full" />
                <span className="text-sm font-medium">+{rewards.sunlight} ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏™‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå</span>
              </motion.div>
            </div>
          </motion.div>
        )}

        {/* Save Button */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.6 }}
        >
          <Button
            onClick={handleSave}
            disabled={createSleepRecord.isPending || rating === 0}
            className="w-full bg-primary hover:bg-primary/90 text-primary-foreground py-4 rounded-xl font-semibold shadow-lg"
            size="lg"
          >
            {createSleepRecord.isPending ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
          </Button>
        </motion.div>
      </motion.div>
    </div>
  );
}
